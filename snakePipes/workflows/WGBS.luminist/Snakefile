import os
import re
from operator import is_not
import glob
import io
import gzip
import snakePipes.common_functions as cf

### snakemake_workflows initialization ########################################
maindir = os.path.dirname(os.path.dirname(workflow.basedir))
workflow_tools=os.path.join(maindir, "shared", "tools")
workflow_rscripts=os.path.join(maindir, "shared", "rscripts")

# load conda ENVs (path is relative to "shared/rules" directory)
globals().update(cf.set_env_yamls())

# load config file
globals().update(cf.load_configfile(workflow.overwrite_configfile,config["verbose"]))
# load organism-specific data, i.e. genome indices, annotation, etc.
globals().update(cf.load_organism_data(genome,maindir,config["verbose"]))

###switch off read trimming rules if bam input provided ## this might be moved to a more useful location in the future
if trimReads=='None':
    trimReads=None

if fromBam:
    trimReads=None

## trim
fastq_dir = "FASTQ"
if trimReads=='user':
    fastq_dir = "FASTQ_Cutadapt"


### Sample init #############################################################
if not fromBam:
    infiles = sorted(glob.glob(os.path.join(str(indir or ''), '*'+ext)))
    samples = cf.get_sample_names(infiles,ext,reads)
    paired = cf.is_paired(infiles,ext,reads)

    if not samples:
        logger.error("  Error! NO samples found in dir "+str(indir or '')+"!!!")#\n \n\n
        exit(1)

    if not paired:
        logger.error(" Error! Paired-end samples not detected. "
              "WGBS workflow currently works only with paired-end samples "+str(indir or '')+"!!!")#\n \n\n
        exit(1)

    def get_Read_Group(INfiles):
        RG_dict={}
        for INfile in INfiles:
            with io.TextIOWrapper(gzip.open(INfile, 'r')) as f:
                file_content = f.readline().strip()
            read_root=re.sub('_R1.fastq.gz','',os.path.basename(INfile))
            try:
                PL=re.sub('@','',file_content).split(":")[0]
                PU=re.sub('@','',file_content).split(":")[2]
            except:
                PL="Illumina"
                PU="Illumina"
            RG='@RG"\\t"ID:1"\\t"SM:'+read_root+'"\\t"LB:'+read_root+'"\\t"PL:'+PL+'"\\t"PU:'+PU
            RG_dict[read_root]=RG
        return RG_dict

    RG_dict=get_Read_Group(infiles)
    del infiles

else:
    infiles = sorted(glob.glob(os.path.join(str(indir or ''), '*'+bam_ext)))
    samples = cf.get_sample_names_bam(infiles,bam_ext)
    ###add checks for existing read group
    del infiles



### conditional/optional rules #################################################
#some of those definitions are used to generate output strings for some of the rules
################################################################################

if not fromBam:

    def run_cutadapt(trimReads):
        if trimReads=='user':
            return (expand("FASTQ_Cutadapt/{sample}{read}.fastq.gz", sample = samples, read = reads) + expand("FastQC_Cutadapt/{sample}{read}_fastqc.html", sample = samples, read = reads) )
        elif trimReads=='auto':
            return( expand("FastQC_In/{sample}.R12.ct.txt" ,sample = samples) + expand("FASTQ_Cutadapt/{sample}{read}.fastq.gz", sample = samples, read = reads) + expand("FastQC_Cutadapt/{sample}{read}_fastqc.html", sample = samples, read = reads) )
        elif trimReads is None:
            return([])


def run_int_aggStats(intList):
    if intList:
        int_dest=[re.sub('.bed','.CpGlist.bed',os.path.basename(x)) for x in intList]
        return ([os.path.join("aux_files",re.sub('.fa',w,os.path.basename(genome_fasta))) for w in int_dest])
    else:
        return ([])


### include modules of other snakefiles ########################################
##some rules depend on the definitions above
################################################################################
if not fromBam:
    # FASTQ: either downsample FASTQ files or create symlinks to input files
    include: os.path.join(maindir, "shared", "rules", "FASTQ.snakefile")

# WGBS
include: os.path.join(maindir, "workflows", "WGBS.luminist", "WGBS_luminist.snakefile")


### execute before workflow starts #############################################
################################################################################
onstart:
    with open (os.path.join(outdir, 'pipeline.log'),"a") as lo:
        if "verbose" in config and config["verbose"]:
            print("--- Workflow parameters --------------------------------------------------------",file=lo)
            print("samples:"+ str(samples),file=lo)
            print("input dir:"+ indir,file=lo)
            print("-" * 80,file=lo)#, "\n"

            print("--- Environment ----------------------------------------------------------------",file=lo)
            print("$TMPDIR: "+os.getenv('TMPDIR', ""),file=lo)
            print("$HOSTNAME: "+os.getenv('HOSTNAME', ""),file=lo)
            print("-" * 80,file=lo)#, "\n"

### main rule ##################################################################
################################################################################
if not fromBam:
    localrules:
        FASTQ1,
        FASTQ2,
        produce_report

    rule all:
        input:
            expand("FASTQ/{sample}{read}.fastq.gz", sample = samples, read = reads),
            expand("FASTQ_downsampled/{sample}{read}.fastq.gz", sample = samples, read = reads),
            expand("FastQC/{sample}{read}_fastqc.html", sample = samples, read = reads),
            expand("QC_metrics/{sample}.sorted.flagstat",sample=samples),
            expand("bams/{sample}.PCRrm.bam", sample = samples),
            expand("QC_metrics/{sample}.Mbias.txt",sample=samples),
            'QC_metrics/QC_report.html',
            expand("methXT/{sample}_CpG.bedGraph",sample=samples),
            expand("methXT/{sample}.CpG.filt2.bed",sample=samples),
            run_int_aggStats(intList),
            "custom_stats/on_target_stats.all_reads.txt",
            "custom_stats/on_target_stats.mapq20.txt",
            expand("custom_stats/{sample}_CpG.bedGraph",sample=samples),
            expand("custom_stats/{sample}.mean_methyl_per_region.tsv",sample=samples),
            "custom_stats/coverage_per_base.targets.bed",
            "custom_stats/on_target_stats.per_region.mapq20.tsv",
            "custom_stats/on_target_stats.per_region.tsv",
            "custom_stats/targets.CpG.bed",
            "custom_stats/targets.CpG.coverage.txt",
            "custom_stats/mean_coverage_per_base.targets.bed",
            "custom_stats/mean_methyl_per_region.tsv",
            run_cutadapt(trimReads)


else:
    localrules:
        link_bam,
        produce_report

    rule all:
        input:
            expand("bams/{sample}.PCRrm.bam", sample = samples),
            expand("QC_metrics/{sample}.sorted.flagstat",sample=samples),
            expand("QC_metrics/{sample}.Mbias.txt",sample=samples),
            'QC_metrics/QC_report.html',
            expand("methXT/{sample}_CpG.bedGraph",sample=samples),
            expand("methXT/{sample}.CpG.filt2.bed",sample=samples),
            run_int_aggStats(intList),
            "custom_stats/on_target_stats.all_reads.txt",
            "custom_stats/on_target_stats.mapq20.txt",
            expand("custom_stats/{sample}_CpG.bedGraph",sample=samples),
            expand("custom_stats/{sample}.mean_methyl_per_region.tsv",sample=samples),
            "custom_stats/coverage_per_base.targets.bed",
            "custom_stats/on_target_stats.per_region.mapq20.tsv",
            "custom_stats/on_target_stats.per_region.tsv",
            "custom_stats/targets.CpG.bed",
            "custom_stats/targets.CpG.coverage.txt",
            "custom_stats/mean_coverage_per_base.targets.bed",
            "custom_stats/mean_methyl_per_region.tsv"


### execute after workflow finished ############################################
################################################################################
onsuccess:
    cf.cleanLogs(outdir)
    if "verbose" in config and config["verbose"]:
        with open (os.path.join(outdir, 'pipeline.log'),"a") as lo:
            print("--- WGBS workflow finished successfully! --------------------------------",file=lo)#\n \n
